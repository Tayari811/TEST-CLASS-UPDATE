@isTest
public class LQ_MultiSelectLookupControllerTest {

    static testMethod void testIsValidBNSFId() {
        // Case 1: Test with a valid BNSF ID
        String validBNSFID = 'AUTOTEST';
        List<my_apps__x> output = LQ_MultiSelectLookupController.isValidBNSFId(validBNSFID);
        System.assertNotEquals(0, output.size(), 'Expected valid BNSF ID to return some results.');

        // Case 2: Test with an invalid BNSF ID
        String invalidBNSFID = 'Dummy';
        try {
            output = LQ_MultiSelectLookupController.isValidBNSFId(invalidBNSFID);
            System.assert(false, 'Expected an AuraHandledException for an invalid BNSF ID');
        } catch (AuraHandledException e) {
            System.assert(e.getMessage().contains('Please Enter valid BNSF Id'), 'Expected exception for invalid BNSF ID');
        }

        // Case 3: Test with a null BNSF ID
        output = LQ_MultiSelectLookupController.isValidBNSFId(null);
        System.assertEquals(0, output.size(), 'Expected no results for null BNSF ID');
    }

    static testMethod void testGetAdditionalApplication() {
        // Ensure that this method returns a list, even if itâ€™s empty
        List<BNSF_Application__c> additionalAppList = LQ_MultiSelectLookupController.getAdditionalApplication();
        System.assertNotEquals(null, additionalAppList, 'Expected additional application list to be non-null.');
    }

     static testMethod void testCheckApplicationAccessRequest() {
        // Set up a contact for the access requests
        Contact contact = new Contact(
            FirstName = 'Test',
            LastName = 'User',
            MyBNSF_ID__c = 'AUTOTEST'
        );
        insert contact;

        // Ensure the test is run in a System context to bypass sharing rules if necessary
        User adminUser = [SELECT Id FROM User WHERE Profile.Name = 'System Administrator' LIMIT 1];
        System.runAs(Admin) {

            Date fourteenDaysAgo = Date.today().addDays(-14);

            // Case 1: Test for 'Account Status' with Manage_Various_Freight_Invoices__c set
            insert new Application_Access_Request__c(Customer__c = contact.Id, Manage_Various_Freight_Invoices__c = true, CreatedDate = fourteenDaysAgo);
            System.assertEquals(true, LQ_MultiSelectLookupController.checkApplicationAccessRequest('Account Status'), 'Expected Account Status condition to be true.');

            // Case 2: Test for 'Intermodal Storage' with Pay_Storage_Fees__c set
            insert new Application_Access_Request__c(Customer__c = contact.Id, Pay_Storage_Fees__c = true, CreatedDate = fourteenDaysAgo);
            System.assertEquals(true, LQ_MultiSelectLookupController.checkApplicationAccessRequest('Intermodal Storage'), 'Expected Intermodal Storage condition to be true.');

            // Case 3: Test for 'Railcar Equipment Request' with Order_Railcars__c set
            insert new Application_Access_Request__c(Customer__c = contact.Id, Order_Railcars__c = true, CreatedDate = fourteenDaysAgo);
            System.assertEquals(true, LQ_MultiSelectLookupController.checkApplicationAccessRequest('Railcar Equipment Request'), 'Expected Railcar Equipment Request condition to be true.');

            // Case 4: Test for 'Railcar Management Tool' with Order_Railcars__c set
            System.assertEquals(true, LQ_MultiSelectLookupController.checkApplicationAccessRequest('Railcar Management Tool'), 'Expected Railcar Management Tool condition to be true.');

            // Case 5: Test for 'Shipping Instructions' with Create_Or_Submit_Billing__c set
            insert new Application_Access_Request__c(Customer__c = contact.Id, Create_Or_Submit_Billing__c = true, CreatedDate = fourteenDaysAgo);
            System.assertEquals(true, LQ_MultiSelectLookupController.checkApplicationAccessRequest('Shipping Instructions'), 'Expected Shipping Instructions condition to be true.');

            // Case 6: Test for 'Shipping Instructions Hazardous' with Create_Or_Submit_Billing__c set
            System.assertEquals(true, LQ_MultiSelectLookupController.checkApplicationAccessRequest('Shipping Instructions Hazardous'), 'Expected Shipping Instructions Hazardous condition to be true.');

            // Case 7: Test for 'Switch Or In Release Rail Cars' with Switch_Or_In_Release_Rail_Cars__c set
            insert new Application_Access_Request__c(Customer__c = contact.Id, Switch_Or_In_Release_Rail_Cars__c = true, CreatedDate = fourteenDaysAgo);
            System.assertEquals(true, LQ_MultiSelectLookupController.checkApplicationAccessRequest('Switch Or In Release Rail Cars'), 'Expected Switch Or In Release Rail Cars condition to be true.');

            // Case 8: Test for 'Customer Dwell Management Tool' with Manage_Demurrage_Invoices__c set
            insert new Application_Access_Request__c(Customer__c = contact.Id, Manage_Demurrage_Invoices__c = true, CreatedDate = fourteenDaysAgo);
            System.assertEquals(true, LQ_MultiSelectLookupController.checkApplicationAccessRequest('Customer Dwell Management Tool'), 'Expected Customer Dwell Management Tool condition to be true.');

            // Case 9: Test with no matching conditions to confirm false return
            System.assertEquals(false, LQ_MultiSelectLookupController.checkApplicationAccessRequest('Nonexistent Access'), 'Expected non-matching condition to return false.');
        }
    }

    static testMethod void testCreateApplicationAccessRequest() {
        // Set up Account, Contact, and User
        Account account = new Account(Name = 'Test Account');
        insert account;

        Contact contact = new Contact(
            FirstName = 'Test',
            LastName = 'User',
            AccountId = account.Id,
            MyBNSF_ID__c = 'AUTOTEST',
            Email = 'test@example.com'
        );
        insert contact;

        // Run test in a specific user context
        User adminUser = [SELECT Id FROM User WHERE Profile.Name = 'System Administrator' LIMIT 1];
        System.runAs(Admin) {
            // Case 1: Create access request with all valid inputs
            Boolean result = LQ_MultiSelectLookupController.createApplicationAccessRequest(
                'AUTOTEST', '0165550001,0373322323', '', false, false, 'B R SIDING,WI', 
                'C JUAREZ,CI', true, true, true, true, true, true, 
                '401k,AEI Utility-WAS6', 'Test comments'
            );
            System.assertEquals(true, result, 'Expected application access request creation to succeed.');

            // Validate that the access request record is created
            List<Application_Access_Request__c> appAccReqList = [SELECT Id FROM Application_Access_Request__c];
            System.assertEquals(1, appAccReqList.size(), 'Expected one access request to be created.');

            // Case 2: Attempt to create a duplicate access request, which should return false
            result = LQ_MultiSelectLookupController.createApplicationAccessRequest(
                'AUTOTEST', '0165550001,0373322323', '', false, false, 'B R SIDING,WI', 
                'C JUAREZ,CI', true, true, true, true, true, true, 
                '401k,AEI Utility-WAS6', 'Test comments'
            );
            System.assertEquals(false, result, 'Expected duplicate request to be prevented.');

            // Case 3: Test missing optional fields
            result = LQ_MultiSelectLookupController.createApplicationAccessRequest(
                'AUTOTEST', '', '', false, false, '', '', false, false, false, false, false, false, '', ''
            );
            System.assertEquals(true, result, 'Expected success even with minimal fields filled.');
        }
    }
}
